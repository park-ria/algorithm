"""
1. 아이디어
  - 특정 조건 만족하는 한 계속 이동 > while
  - 4방향 탐색 먼저 수행 > 빈칸 있을 경우 이동 => 4방향을 for문으로 탐색
  - 4방향 탐색 안될 경우, 뒤로 한칸 가서 반복
  - 뒤로 갈 수 없을 경우 종료
  - 방향 : 북동남서
    d = 0 : 북(-1,0)
    d = 1 : 동(0,1)
    d = 2 : 남(1,0)
    d = 3 : 서(0,-1)
    dy = [-1, 0, 1, 0]
    dx = [0, 1, 0, -1]
  - 왼쪽 방향 알고리즘
    왼쪽 방향으로 돌아야하므로 서->남, 남->동, 동->북, 북->서 방향임.. 결국 -1을 하면 왼쪽 방향으로 돌음
    만약 북쪽(d=0)인데 4방향으로 확인하기 위해 왼쪽(d-i for i in range(1,4))으로 돈다면
    한번 왼쪽: 북 -> 서 : d - i = 0 - 1 = -1 나옴 하지만 서쪽은 3임. 그래서 d = (d-i+4)%4 하면 3 나옴
    두번 왼쪽: 북 -> 남 : d - 2i = 0 - 2 = -2 나옴 하지만 남쪽은 2임. 그래서 d = (d-i+4)%4 하면 2 나옴
    세번 왼쪽: 북 -> 동 : d - 3i = 0 - 3 = -3 나옴 하지만 남쪽은 1임. 그래서 d = (d-i+4)%4 하면 1 나옴
    네번 왼쪽: 북 -> 북 : d - 4i = 0 - 4 = -4 나옴 하지만 남쪽은 0임. 그래서 d = (d-i+4)%4 하면 0 나옴
    => 그래서 i의 범위는 1~4가 돼야하고, d = (d-i+4)%4가 되어야 함
  - 반대 방향 알고리즘
    북(-1,0) -> 남(1,0)
    동(0,1) -> 서(0,-1)
    각각 dy랑 dx에 -1을 곱해주면 반대가 됨 => ny = y - dy[d], nx = x - dx[d]
2. 시간복잡도
  - while문 최대 : N * M * 4 = O(NM) = N * M = 50^2 = 2500 < 2억 => 가능
  - 각 칸에서 4방향 연산 수행
3. 자료구조
  - 전체 지도(map) : int[][]
  - 로봇청소기 위치, 방향, 전체 청소한 곳 수 : int, int, int
"""

import sys
input = sys.stdin.readline

N, M = map(int, input().split())
y, x, d = map(int, input().split())
map = [list(map(int, input().split())) for _ in range(N)]
dy = [-1, 0, 1, 0]
dx = [0, 1, 0, -1]
cnt = 0

while 1:
    if map[y][x] == 0:
        map[y][x] = 2 #청소표시를 2로 함
        cnt += 1
    sw = False #4방향 돌다가 break걸리면 밑에 거 확인안하고 바로 while로 루프 돌게 하려고
    for i in range(1, 5):
        ny = y + dy[d-i]
        nx = x + dx[d-i]
        if 0 <= ny < N and 0 <= nx < M:
            if map[ny][nx] == 0:
                #그 방향으로 회전한 다음 한 칸을 전진하고 1번부터 진행한다.
                d = (d-i+4)%4
                y = ny
                x = nx
                sw = True
                break

    # 4방향 모두 있지 않은 경우
    if sw == False:
        # 뒤쪽 방향이 막혀있는지 확인
        ny = y - dy[d]
        nx = x - dx[d]
        if 0 <= ny < N and 0 <= nx < M:
            if map[ny][nx] == 1:
                break #뒤쪽이 벽이면 종료
            else:
                y = ny
                x = nx #뒤쪽인 벽이 아니면 후진방향으로 바꿔 줌
        else:
            break #범위가 초과할때도 종료
print(cnt)